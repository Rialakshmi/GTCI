import java.util.*;

class TripletSumCloseToTarget {
//Given an array of unsorted numbers and a target number, find a triplet in the array whose sum is as close to the target number as possible, return the sum of the triplet. If there are more than one such triplet, return the sum of the triplet with the smallest sum.
  public static int searchTriplet(int[] arr, int target) {
    Arrays.sort(arr);
        int sum = 0;
        int smallest=Integer.MAX_VALUE;
        
        for(int i=0;i<arr.length-2;i++) {
          
            int left=i+1;
            int right=arr.length-1;
            while(left<right) {
                int currSum=arr[left]+arr[right]+arr[i];
                int diff=Math.abs(target-currSum);
                if(smallest>diff) {
                    smallest = diff;
                    sum = currSum;
                }
                if(diff==0)
                    return sum;
                else if(currSum>target)
                    right--;
                else
                    left++;
            }
        }
        
        return sum;
  }
}
