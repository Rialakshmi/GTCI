import java.util.*;
/*
Smallest Window containing Substring
*/
class MinimumWindowSubstring {
  public static String findSubstring(String str, String pattern) {
      
         HashMap<Character,Integer> hm = new HashMap<>();
        for(char c:pattern.toCharArray()) {
            hm.put(c,hm.getOrDefault(c,0)+1);
        }
        
        int startWindow=0;
        int matchCount=0;
        int subStrStart=0;
        int minLength=str.length()+1;
        for(int endWindow=0;endWindow<str.length();endWindow++) {
            
            char right=str.charAt(endWindow);
            if(hm.containsKey(right)) {
                hm.put(right,hm.get(right)-1);
                if(hm.get(right)>=0)
                    matchCount++;
            }
            while(matchCount==pattern.length()) {
                if(minLength>endWindow-startWindow+1) {
                  minLength = Math.min(minLength,endWindow-startWindow+1);
                    subStrStart=startWindow;  
                }
                char left=str.charAt(startWindow++);
                if(hm.containsKey(left)) {
                    if(hm.get(left)==0)
                        matchCount--;
                    hm.put(left,hm.get(left)+1);
                }
         
            }
        }
        
            return minLength > str.length() ? "" : str.substring(subStrStart, subStrStart + minLength);
  }
}
